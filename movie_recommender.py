# -*- coding: utf-8 -*-
"""movie_recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XbxQ207z5au4UleYuUQOA63Pgg77T6OC
"""

#from google.colab import files

import pandas as pd

#print('select movies data file')
#uploaded = files.upload()

movieFile = 'movies.csv'
movies = pd.read_csv(movieFile, usecols=['movieId', 'title'], dtype={'title':'str'})

print(movies.head())
print(movies.info())


ratingFile = 'ratings.csv'
ratings = pd.read_csv(ratingFile, usecols=['userId', 'movieId', 'rating'])

print(ratings.head())
print(ratings.info())

array_ratings = ratings.pivot(index='movieId', columns='userId', values='rating').fillna(1e-8)
print(array_ratings.head())
#print(array_ratings[0])

print(type(array_ratings))
array_ratings_np = array_ratings.to_numpy()
print(len(array_ratings_np))


#print(movies.loc[90]['title'])



def getPrediction(distance, k):
	output_values = [dist[-1] for dist in distance[:k+1]]
	#prediction = max(set(output_values), key=output_values.count)
	return output_values #prediction

#print(array_ratings_np[0][0])

def getDistance(movieIndex, train): #, train
    #test = test[:len(test)-1]
    distance = []

    j = 0
    for training in train:
        x = 0
        for i in range(len(training)):
            x += (float(train[movieIndex][i]) - float(training[i])) ** 2
        #print(training)
        movie = movies.loc[j]['title'] #movies[movies['movieId'] == j+1].iloc[0]['title']
        distance.append([x ** .5, movie])
        j += 1

    return distance

def evaluateAlgorithm(test, k, movieIndex):
    #distance = []
    #count = 0
    #wCount = 0
    #mCount = 0
    #for i in range(len(array_ratings_np)):
        # = test[i]
    distance = getDistance(movieIndex, array_ratings_np) #, train
    distance.sort()
	
    prediction = getPrediction(distance, k)
    print(prediction)
    

import string
movieName = string.capwords(input('enter a movie name (eg Die Hard 2) '))
year = input('enter release year of that movie (eg 1990) ')
test = movieName + ' (' + year + ')'

k = int(input('expected number of recommendations '))

#movieId = movies[movies['movieId'] == test].iloc[0]['movieid']

print(movies.index[movies['title'] == test].tolist()[0])

movieIndex = movies.index[movies['title'] == test].tolist()[0] #movies[movies['title'] == test].to_numpy()
#print(movieIndex)
evaluateAlgorithm(test, k, movieIndex)
